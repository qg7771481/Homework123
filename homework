
from fastapi import FastAPI, HTTPException
from models import Task, TaskUpdate

app = FastAPI(title="To-Do List API")


tasks = {}
task_id_counter = 1

@app.post("/tasks", response_model=dict)
def create_task(task: Task):
    global task_id_counter
    task_id = task_id_counter
    tasks[task_id] = task
    task_id_counter += 1
    return {"id": task_id, "task": task}

@app.get("/tasks", response_model=dict)
def get_all_tasks():
    return {task_id: task for task_id, task in tasks.items()}

@app.get("/tasks/{task_id}", response_model=Task)
def get_task(task_id: int):
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail="Task not found")
    return tasks[task_id]

@app.put("/tasks/{task_id}", response_model=Task)
def update_task(task_id: int, task_update: TaskUpdate):
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail="Task not found")

    stored_task = tasks[task_id]
    update_data = task_update.dict(exclude_unset=True)

    updated_task = stored_task.copy(update=update_data)
    tasks[task_id] = updated_task
    return updated_task

@app.delete("/tasks/{task_id}")
def delete_task(task_id: int):
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail="Task not found")
    del tasks[task_id]
    return {"message": "Task deleted"}


